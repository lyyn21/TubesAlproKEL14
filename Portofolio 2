package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"strings"
)

// Struktur data Proyek
type Proyek struct {
	Nama      string
	Deskripsi string
	Teknologi []string
	Kategori  string
	Tanggal   string
	Kesulitan string
}

// Menambah proyek baru
func TambahProyek(proyek []Proyek, nama, deskripsi, kategori, kesulitan, tanggal string, teknologi []string) []Proyek {
	proyekBaru := Proyek{
		Nama:      nama,
		Deskripsi: deskripsi,
		Teknologi: teknologi,
		Kategori:  kategori,
		Tanggal:   tanggal,
		Kesulitan: kesulitan,
	}
	return append(proyek, proyekBaru)
}

// Mengubah proyek berdasarkan nama lama
func UbahProyek(proyek []Proyek, namaLama, namaBaru, deskripsi, kategori, kesulitan, tanggal string, teknologi []string) []Proyek {
	for i, p := range proyek {
		if p.Nama == namaLama {
			proyek[i] = Proyek{
				Nama:      namaBaru,
				Deskripsi: deskripsi,
				Teknologi: teknologi,
				Kategori:  kategori,
				Tanggal:   tanggal,
				Kesulitan: kesulitan,
			}
			return proyek
		}
	}
	fmt.Println("Proyek dengan nama", namaLama, "tidak ditemukan!")
	return proyek
}

// Menghapus proyek berdasarkan nama
func HapusProyek(proyek []Proyek, nama string) []Proyek {
	var result []Proyek
	found := false
	for _, p := range proyek {
		if p.Nama != nama {
			result = append(result, p)
		} else {
			found = true
		}
	}
	if !found {
		fmt.Println("Proyek dengan nama", nama, "tidak ditemukan!")
	}
	return result
}

// Menampilkan semua proyek
func TampilkanProyek(proyek []Proyek) {
	if len(proyek) == 0 {
		fmt.Println("Tidak ada proyek yang tersedia.")
		return
	}
	fmt.Println("Daftar Proyek:")
	for _, p := range proyek {
		fmt.Printf("Nama: %s\nDeskripsi: %s\nKategori: %s\nTanggal: %s\nKesulitan: %s\nTeknologi: %s\n\n", p.Nama, p.Deskripsi, p.Kategori, p.Tanggal, p.Kesulitan, strings.Join(p.Teknologi, ", "))
	}
}

// Pencarian berdasarkan kategori
func CariBerdasarkanKategori(proyek []Proyek, kategori string) {
	var hasil []Proyek
	for _, p := range proyek {
		if strings.EqualFold(p.Kategori, kategori) {
			hasil = append(hasil, p)
		}
	}

	if len(hasil) == 0 {
		fmt.Println("Tidak ada proyek dengan kategori:", kategori)
	} else {
		fmt.Println("Proyek dengan kategori", kategori, ":")
		TampilkanProyek(hasil)
	}
}

// Validasi input tidak kosong
func validasiInput(prompt string) string {
	var input string
	for {
		fmt.Print(prompt)
		scanner := bufio.NewScanner(os.Stdin)
		scanner.Scan()
		input = scanner.Text()
		if strings.TrimSpace(input) != "" {
			break
		}
		fmt.Println("Input tidak boleh kosong, coba lagi.")
	}
	return input
}

// Fungsi untuk menyimpan proyek ke file
func SimpanProyek(proyek []Proyek, filename string) error {
	file, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer file.Close()

	encoder := json.NewEncoder(file)
	return encoder.Encode(proyek)
}

// Fungsi untuk memuat proyek dari file
func MuatProyek(filename string) ([]Proyek, error) {
	var proyek []Proyek
	file, err := os.Open(filename)
	if err != nil {
		return proyek, err
	}
	defer file.Close()

	decoder := json.NewDecoder(file)
	err = decoder.Decode(&proyek)
	if err != nil {
		return proyek, err
	}

	return proyek, nil
}

// Tampilan menu utama
func tampilkanMenu() {
	fmt.Println("\n=== APLIKASI PORTOFOLIO DATA SCIENCE ===")
	fmt.Println("[1] Tambah Proyek")
	fmt.Println("[2] Ubah Proyek")
	fmt.Println("[3] Hapus Proyek")
	fmt.Println("[4] Tampilkan Semua Proyek")
	fmt.Println("[5] Cari Proyek Berdasarkan Kategori")
	fmt.Println("[6] Muat Proyek dari File")
	fmt.Println("[7] Simpan Proyek ke File")
	fmt.Println("[0] Keluar")
	fmt.Println("-----------------------------------------")
	fmt.Print("Pilih menu: ")
}

// Fungsi untuk membaca input dari pengguna
func bacaInput() string {
	scanner := bufio.NewScanner(os.Stdin)
	scanner.Scan()
	return scanner.Text()
}

func main() {
	var proyek []Proyek
	var filename = "proyek.json"

	for {
		tampilkanMenu()
		var pilihan int
		fmt.Scanln(&pilihan)

		switch pilihan {
		case 1:
			// Tambah proyek
			nama := validasiInput("Nama Proyek: ")
			deskripsi := validasiInput("Deskripsi Proyek: ")
			kategori := validasiInput("Kategori: ")
			kesulitan := validasiInput("Kesulitan: ")
			tanggal := validasiInput("Tanggal (YYYY-MM-DD): ")
			teknologiStr := validasiInput("Teknologi (pisahkan dengan koma): ")
			teknologi := strings.Split(teknologiStr, ",")

			proyek = TambahProyek(proyek, nama, deskripsi, kategori, kesulitan, tanggal, teknologi)
			fmt.Println("Proyek berhasil ditambahkan!")

		case 2:
			// Ubah proyek
			namaLama := validasiInput("Nama proyek yang ingin diubah: ")
			namaBaru := validasiInput("Nama Baru: ")
			deskripsi := validasiInput("Deskripsi Baru: ")
			kategori := validasiInput("Kategori Baru: ")
			kesulitan := validasiInput("Kesulitan Baru: ")
			tanggal := validasiInput("Tanggal Baru (YYYY-MM-DD): ")
			teknologiStr := validasiInput("Teknologi Baru (pisahkan dengan koma): ")
			teknologi := strings.Split(teknologiStr, ",")

			proyek = UbahProyek(proyek, namaLama, namaBaru, deskripsi, kategori, kesulitan, tanggal, teknologi)
			fmt.Println("Proyek berhasil diubah!")

		case 3:
			// Hapus proyek
			nama := validasiInput("Nama proyek yang ingin dihapus: ")
			proyek = HapusProyek(proyek, nama)
			fmt.Println("Proyek berhasil dihapus!")

		case 4:
			// Tampilkan proyek
			TampilkanProyek(proyek)

		case 5:
			// Cari proyek berdasarkan kategori
			kategori := validasiInput("Masukkan kategori untuk pencarian: ")
			CariBerdasarkanKategori(proyek, kategori)

		case 6:
			// Muat proyek dari file
			var err error
			proyek, err = MuatProyek(filename)
			if err != nil {
				fmt.Println("Gagal memuat proyek:", err)
			} else {
				fmt.Println("Proyek berhasil dimuat dari file.")
			}

		case 7:
			// Simpan proyek ke file
			err := SimpanProyek(proyek, filename)
			if err != nil {
				fmt.Println("Gagal menyimpan proyek:", err)
			} else {
				fmt.Println("Proyek berhasil disimpan ke file.")
			}

		case 0:
			// Keluar
			fmt.Println("Terima kasih telah menggunakan aplikasi ini!")
			return

		default:
			fmt.Println("Pilihan tidak valid, coba lagi.")
		}
	}
}
