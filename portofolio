package main

import (
	"fmt"
	"strings"
)

// Struktur data Proyek
type Proyek struct {
	Nama      string
	Deskripsi string
	Teknologi []string
	Kategori  string
	Tanggal   string
	Kesulitan string
}

// Menambah proyek baru
func TambahProyek(proyek []Proyek, nama, deskripsi, kategori, kesulitan, tanggal string, teknologi []string) []Proyek {
	proyekBaru := Proyek{
		Nama:      nama,
		Deskripsi: deskripsi,
		Teknologi: teknologi,
		Kategori:  kategori,
		Tanggal:   tanggal,
		Kesulitan: kesulitan,
	}
	return append(proyek, proyekBaru)
}

// Mengubah proyek berdasarkan nama lama
func UbahProyek(proyek []Proyek, namaLama, namaBaru, deskripsi, kategori, kesulitan, tanggal string, teknologi []string) []Proyek {
	for i, p := range proyek {
		if p.Nama == namaLama {
			proyek[i] = Proyek{
				Nama:      namaBaru,
				Deskripsi: deskripsi,
				Teknologi: teknologi,
				Kategori:  kategori,
				Tanggal:   tanggal,
				Kesulitan: kesulitan,
			}
		}
	}
	return proyek
}

// Menghapus proyek berdasarkan nama
func HapusProyek(proyek []Proyek, nama string) []Proyek {
	var result []Proyek
	for _, p := range proyek {
		if p.Nama != nama {
			result = append(result, p)
		}
	}
	return result
}

// Mencari proyek berdasarkan nama atau kategori menggunakan Sequential Search
func CariProyek(proyek []Proyek, keyword string, kategori bool) []Proyek {
	var hasil []Proyek
	for _, p := range proyek {
		if kategori {
			if strings.ToLower(p.Kategori) == strings.ToLower(keyword) {
				hasil = append(hasil, p)
			}
		} else {
			if strings.ToLower(p.Nama) == strings.ToLower(keyword) {
				hasil = append(hasil, p)
			}
		}
	}
	return hasil
}

// Mengurutkan proyek berdasarkan kesulitan (Selection Sort)
func SelectionSort(proyek []Proyek, key string) {
	for i := 0; i < len(proyek)-1; i++ {
		minIdx := i
		for j := i + 1; j < len(proyek); j++ {
			if proyek[j].Kesulitan < proyek[minIdx].Kesulitan {
				minIdx = j
			}
		}
		proyek[i], proyek[minIdx] = proyek[minIdx], proyek[i]
	}
}

// Mengurutkan proyek berdasarkan tanggal pembuatan (Insertion Sort)
func InsertionSort(proyek []Proyek) {
	for i := 1; i < len(proyek); i++ {
		current := proyek[i]
		j := i - 1
		for j >= 0 && proyek[j].Tanggal > current.Tanggal {
			proyek[j+1] = proyek[j]
			j--
		}
		proyek[j+1] = current
	}
}

// Menampilkan jumlah proyek per kategori
func StatistikKategori(proyek []Proyek) map[string]int {
	kategoriCount := make(map[string]int)
	for _, p := range proyek {
		kategoriCount[p.Kategori]++
	}
	return kategoriCount
}

// Tampilan menu utama
func tampilkanMenu() {
	fmt.Println("\n=== APLIKASI PORTOFOLIO DATA SCIENCE ===")
	fmt.Println("[1] Tambah Proyek")
	fmt.Println("[2] Ubah Proyek")
	fmt.Println("[3] Hapus Proyek")
	fmt.Println("[4] Cari Proyek")
	fmt.Println("[5] Urutkan Proyek")
	fmt.Println("[6] Statistik Kategori")
	fmt.Println("[0] Keluar")
	fmt.Println("-----------------------------------------")
	fmt.Print("Pilih menu: ")
}

func main() {
	var proyek []Proyek

	for {
		tampilkanMenu()
		var pilihan int
		fmt.Scanln(&pilihan)

		switch pilihan {
		case 1:
			// Tambah proyek
			var nama, deskripsi, kategori, kesulitan, tanggal string
			var teknologiStr string

			// Validasi input nama
			for {
				fmt.Print("Nama Proyek: ")
				fmt.Scanln(&nama)
				if strings.TrimSpace(nama) != "" {
					break
				} else {
					fmt.Println("Nama proyek tidak boleh kosong. Coba lagi.")
				}
			}

			// Validasi deskripsi
			for {
				fmt.Print("Deskripsi Proyek: ")
				fmt.Scanln(&deskripsi)
				if strings.TrimSpace(deskripsi) != "" {
					break
				} else {
					fmt.Println("Deskripsi proyek tidak boleh kosong. Coba lagi.")
				}
			}

			// Validasi kategori
			for {
				fmt.Print("Kategori: ")
				fmt.Scanln(&kategori)
				if strings.TrimSpace(kategori) != "" {
					break
				} else {
					fmt.Println("Kategori tidak boleh kosong. Coba lagi.")
				}
			}

			// Validasi kesulitan
			for {
				fmt.Print("Kesulitan: ")
				fmt.Scanln(&kesulitan)
				if strings.TrimSpace(kesulitan) != "" {
					break
				} else {
					fmt.Println("Kesulitan tidak boleh kosong. Coba lagi.")
				}
			}

			// Validasi tanggal
			for {
				fmt.Print("Tanggal (YYYY-MM-DD): ")
				fmt.Scanln(&tanggal)
				if len(tanggal) == 10 {
					break
				} else {
					fmt.Println("Tanggal tidak valid. Pastikan formatnya YYYY-MM-DD. Coba lagi.")
				}
			}

			// Validasi teknologi
			for {
				fmt.Print("Teknologi (pisahkan dengan koma): ")
				fmt.Scanln(&teknologiStr)
				teknologi := strings.Split(teknologiStr, ",")
				if len(teknologi) > 0 && strings.TrimSpace(teknologiStr) != "" {
					proyek = TambahProyek(proyek, nama, deskripsi, kategori, kesulitan, tanggal, teknologi)
					fmt.Println("Proyek berhasil ditambahkan!")
					break
				} else {
					fmt.Println("Teknologi tidak boleh kosong. Coba lagi.")
				}
			}

		case 2:
			// Ubah proyek
			var namaLama, namaBaru, deskripsi, kategori, kesulitan, tanggal string
			var teknologiStr string
			fmt.Print("Nama proyek yang ingin diubah: ")
			fmt.Scanln(&namaLama)
			fmt.Print("Nama Baru: ")
			fmt.Scanln(&namaBaru)
			fmt.Print("Deskripsi Baru: ")
			fmt.Scanln(&deskripsi)
			fmt.Print("Kategori Baru: ")
			fmt.Scanln(&kategori)
			fmt.Print("Kesulitan Baru: ")
			fmt.Scanln(&kesulitan)
			fmt.Print("Tanggal Baru (YYYY-MM-DD): ")
			fmt.Scanln(&tanggal)
			fmt.Print("Teknologi Baru (pisahkan dengan koma): ")
			fmt.Scanln(&teknologiStr)
			teknologi := strings.Split(teknologiStr, ",")

			proyek = UbahProyek(proyek, namaLama, namaBaru, deskripsi, kategori, kesulitan, tanggal, teknologi)
			fmt.Println("Proyek berhasil diubah!")

		case 3:
			// Hapus proyek
			var nama string
			fmt.Print("Nama proyek yang ingin dihapus: ")
			fmt.Scanln(&nama)
			proyek = HapusProyek(proyek, nama)
			fmt.Println("Proyek berhasil dihapus!")

		case 4:
			// Cari proyek
			var keyword, kategori string
			var pilihCari int
			fmt.Println("Cari proyek berdasarkan:")
			fmt.Println("1. Nama")
			fmt.Println("2. Kategori")
			fmt.Print("Pilih: ")
			fmt.Scanln(&pilihCari)

			if pilihCari == 1 {
				fmt.Print("Masukkan nama proyek: ")
				fmt.Scanln(&keyword)
				hasil := CariProyek(proyek, keyword, false)
				fmt.Println("Proyek ditemukan:")
				for _, p := range hasil {
					fmt.Printf("%s - %s\n", p.Nama, p.Kategori)
				}
			} else if pilihCari == 2 {
				fmt.Print("Masukkan kategori: ")
				fmt.Scanln(&kategori)
				hasil := CariProyek(proyek, kategori, true)
				fmt.Println("Proyek ditemukan:")
				for _, p := range hasil {
					fmt.Printf("%s - %s\n", p.Nama, p.Kategori)
				}
			}

		case 5:
			// Urutkan proyek
			var pilihUrut int
			fmt.Println("Urutkan proyek berdasarkan:")
			fmt.Println("1. Kesulitan")
			fmt.Println("2. Tanggal")
			fmt.Print("Pilih: ")
			fmt.Scanln(&pilihUrut)

			if pilihUrut == 1 {
				SelectionSort(proyek, "kesulitan")
			} else if pilihUrut == 2 {
				InsertionSort(proyek)
			}
			fmt.Println("Proyek setelah diurutkan:")
			for _, p := range proyek {
				fmt.Printf("%s - %s - %s\n", p.Nama, p.Kategori, p.Tanggal)
			}

		case 6:
			// Statistik kategori
			statistik := StatistikKategori(proyek)
			fmt.Println("Statistik Kategori:")
			for kategori, count := range statistik {
				fmt.Printf("%s: %d proyek\n", kategori, count)
			}

		case 0:
			// Keluar
			fmt.Println("Terima kasih telah menggunakan aplikasi ini!")
			return

		default:
			fmt.Println("Pilihan tidak valid, coba lagi.")
		}
	}
}
