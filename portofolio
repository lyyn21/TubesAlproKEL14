package main

import (
	"fmt"
	"strings"
)

// Struktur data Proyek
type Proyek struct {
	Nama      string
	Deskripsi string
	Teknologi []string
	Kategori  string
	Tanggal   string
	Kesulitan string
}

// Menambah proyek baru
func TambahProyek(proyek []Proyek, nama, deskripsi, kategori, kesulitan, tanggal string, teknologi []string) []Proyek {
	proyekBaru := Proyek{
		Nama:      nama,
		Deskripsi: deskripsi,
		Teknologi: teknologi,
		Kategori:  kategori,
		Tanggal:   tanggal,
		Kesulitan: kesulitan,
	}
	return append(proyek, proyekBaru)
}

// Mengubah proyek berdasarkan nama lama
func UbahProyek(proyek []Proyek, namaLama, namaBaru, deskripsi, kategori, kesulitan, tanggal string, teknologi []string) []Proyek {
	for i, p := range proyek {
		if p.Nama == namaLama {
			proyek[i] = Proyek{
				Nama:      namaBaru,
				Deskripsi: deskripsi,
				Teknologi: teknologi,
				Kategori:  kategori,
				Tanggal:   tanggal,
				Kesulitan: kesulitan,
			}
		}
	}
	return proyek
}

// Menghapus proyek berdasarkan nama
func HapusProyek(proyek []Proyek, nama string) []Proyek {
	var hasil []Proyek
	for _, p := range proyek {
		if p.Nama != nama {
			hasil = append(hasil, p)
		}
	}
	return hasil
}

// Mencari proyek berdasarkan nama atau kategori menggunakan Binary Search
func BinarySearch(proyek []Proyek, keyword string, byKategori bool) []Proyek {
	var hasil []Proyek
	low, high := 0, len(proyek)-1

	// Pastikan data sudah terurut
	SelectionSort(proyek) // Mengurutkan terlebih dahulu menggunakan Selection Sort

	for low <= high {
		mid := (low + high) / 2
		var bandingkan string

		if byKategori {
			bandingkan = proyek[mid].Kategori
		} else {
			bandingkan = proyek[mid].Nama
		}

		if strings.ToLower(bandingkan) == strings.ToLower(keyword) {
			hasil = append(hasil, proyek[mid])
			break
		} else if strings.ToLower(bandingkan) < strings.ToLower(keyword) {
			low = mid + 1
		} else {
			high = mid - 1
		}
	}
	return hasil
}

// Mengurutkan proyek berdasarkan kesulitan (Selection Sort)
func SelectionSort(proyek []Proyek) {
	for i := 0; i < len(proyek)-1; i++ {
		minIdx := i
		for j := i + 1; j < len(proyek); j++ {
			if proyek[j].Kesulitan < proyek[minIdx].Kesulitan {
				minIdx = j
			}
		}
		proyek[i], proyek[minIdx] = proyek[minIdx], proyek[i]
	}
}

// Mengurutkan proyek berdasarkan tanggal (Insertion Sort)
func InsertionSort(proyek []Proyek) {
	for i := 1; i < len(proyek); i++ {
		current := proyek[i]
		j := i - 1
		for j >= 0 && proyek[j].Tanggal > current.Tanggal {
			proyek[j+1] = proyek[j]
			j--
		}
		proyek[j+1] = current
	}
}

// Menampilkan semua proyek
func TampilkanSemuaProyek(proyek []Proyek) {
	if len(proyek) == 0 {
		fmt.Println("Belum ada proyek yang terdaftar.")
		return
	}
	fmt.Println("\n--- Daftar Semua Proyek ---")
	for _, p := range proyek {
		fmt.Printf("Nama      : %s\n", p.Nama)
		fmt.Printf("Deskripsi : %s\n", p.Deskripsi)
		fmt.Printf("Kategori  : %s\n", p.Kategori)
		fmt.Printf("Kesulitan : %s\n", p.Kesulitan)
		fmt.Printf("Tanggal   : %s\n", p.Tanggal)
		fmt.Printf("Teknologi : %s\n", strings.Join(p.Teknologi, ", "))
		fmt.Println("------------------------------")
	}
}

// Menampilkan statistik kategori
func StatistikKategori(proyek []Proyek) map[string]int {
	statistik := make(map[string]int)
	for _, p := range proyek {
		statistik[p.Kategori]++
	}
	return statistik
}

// Menu utama
func tampilkanMenu() {
	fmt.Println("\n=== APLIKASI PORTOFOLIO DATA SCIENCE ===")
	fmt.Println("[1] Tambah Proyek")
	fmt.Println("[2] Ubah Proyek")
	fmt.Println("[3] Hapus Proyek")
	fmt.Println("[4] Cari Proyek")
	fmt.Println("[5] Urutkan Proyek")
	fmt.Println("[6] Statistik Kategori")
	fmt.Println("[7] Lihat Semua Proyek")
	fmt.Println("[0] Keluar")
	fmt.Print("Pilih menu: ")
}

func main() {
	var proyek []Proyek

	for {
		tampilkanMenu()
		var pilihan int
		fmt.Scanln(&pilihan)

		switch pilihan {
		case 1:
			var nama, deskripsi, kategori, kesulitan, tanggal, teknologiStr string
			fmt.Print("Nama Proyek: ")
			fmt.Scanln(&nama)
			fmt.Print("Deskripsi: ")
			fmt.Scanln(&deskripsi)
			fmt.Print("Kategori: ")
			fmt.Scanln(&kategori)
			fmt.Print("Kesulitan: ")
			fmt.Scanln(&kesulitan)
			fmt.Print("Tanggal (YYYY-MM-DD): ")
			fmt.Scanln(&tanggal)
			fmt.Print("Teknologi (dipisahkan koma): ")
			fmt.Scanln(&teknologiStr)
			teknologi := strings.Split(teknologiStr, ",")
			proyek = TambahProyek(proyek, nama, deskripsi, kategori, kesulitan, tanggal, teknologi)
			fmt.Println("Proyek berhasil ditambahkan!")

		case 2:
			var namaLama, namaBaru, deskripsi, kategori, kesulitan, tanggal, teknologiStr string
			fmt.Print("Nama proyek yang ingin diubah: ")
			fmt.Scanln(&namaLama)
			fmt.Print("Nama Baru: ")
			fmt.Scanln(&namaBaru)
			fmt.Print("Deskripsi Baru: ")
			fmt.Scanln(&deskripsi)
			fmt.Print("Kategori Baru: ")
			fmt.Scanln(&kategori)
			fmt.Print("Kesulitan Baru: ")
			fmt.Scanln(&kesulitan)
			fmt.Print("Tanggal Baru: ")
			fmt.Scanln(&tanggal)
			fmt.Print("Teknologi Baru (dipisah koma): ")
			fmt.Scanln(&teknologiStr)
			teknologi := strings.Split(teknologiStr, ",")
			proyek = UbahProyek(proyek, namaLama, namaBaru, deskripsi, kategori, kesulitan, tanggal, teknologi)
			fmt.Println("Proyek berhasil diubah!")

		case 3:
			var nama string
			fmt.Print("Nama proyek yang ingin dihapus: ")
			fmt.Scanln(&nama)
			proyek = HapusProyek(proyek, nama)
			fmt.Println("Proyek berhasil dihapus!")

		case 4:
			var keyword string
			var mode int
			fmt.Println("Cari berdasarkan: 1. Nama  2. Kategori")
			fmt.Print("Pilih: ")
			fmt.Scanln(&mode)
			if mode == 1 {
				fmt.Print("Masukkan nama: ")
				fmt.Scanln(&keyword)
				hasil := BinarySearch(proyek, keyword, false) // Menggunakan Binary Search untuk nama
				for _, p := range hasil {
					fmt.Printf("%s - %s\n", p.Nama, p.Kategori)
				}
			} else {
				fmt.Print("Masukkan kategori: ")
				fmt.Scanln(&keyword)
				hasil := BinarySearch(proyek, keyword, true) // Menggunakan Binary Search untuk kategori
				for _, p := range hasil {
					fmt.Printf("%s - %s\n", p.Nama, p.Kategori)
				}
			}

		case 5:
			var mode int
			fmt.Println("Urutkan berdasarkan: 1. Kesulitan  2. Tanggal")
			fmt.Print("Pilih: ")
			fmt.Scanln(&mode)
			if mode == 1 {
				SelectionSort(proyek) // Menggunakan Selection Sort untuk kesulitan
			} else {
				InsertionSort(proyek) // Menggunakan Insertion Sort untuk tanggal
			}
			fmt.Println("Proyek berhasil diurutkan!")

		case 6:
			stat := StatistikKategori(proyek)
			fmt.Println("Statistik Kategori:")
			for k, v := range stat {
				fmt.Printf("%s: %d proyek\n", k, v)
			}

		case 7:
			TampilkanSemuaProyek(proyek)

		case 0:
			fmt.Println("Terima kasih telah menggunakan aplikasi ini.")
			return

		default:
			fmt.Println("Pilihan tidak valid.")
		}
	}
}
