package main

import (
	"fmt"
	"sort"
	"strings"
)

// Struktur data Proyek
type Proyek struct {
	Nama      string
	Deskripsi string
	Teknologi []string
	Kategori  string
	Tanggal   string
	Kesulitan string
}

// Menambah proyek baru
func TambahProyek(proyek []Proyek, nama, deskripsi, kategori, kesulitan, tanggal string, teknologi []string) []Proyek {
	proyekBaru := Proyek{
		Nama:      nama,
		Deskripsi: deskripsi,
		Teknologi: teknologi,
		Kategori:  kategori,
		Tanggal:   tanggal,
		Kesulitan: kesulitan,
	}
	return append(proyek, proyekBaru)
}

// Mengubah proyek berdasarkan nama lama
func UbahProyek(proyek []Proyek, namaLama, namaBaru, deskripsi, kategori, kesulitan, tanggal string, teknologi []string) []Proyek {
	for i, p := range proyek {
		if p.Nama == namaLama {
			proyek[i] = Proyek{
				Nama:      namaBaru,
				Deskripsi: deskripsi,
				Teknologi: teknologi,
				Kategori:  kategori,
				Tanggal:   tanggal,
				Kesulitan: kesulitan,
			}
		}
	}
	return proyek
}

// Menghapus proyek berdasarkan nama
func HapusProyek(proyek []Proyek, nama string) []Proyek {
	var hasil []Proyek
	for _, p := range proyek {
		if p.Nama != nama {
			hasil = append(hasil, p)
		}
	}
	return hasil
}

// Mencari proyek berdasarkan nama (Sequential Search)
func SequentialSearchByName(proyek []Proyek, keyword string) []Proyek {
	var hasil []Proyek
	lowerKeyword := strings.ToLower(keyword)
	for _, p := range proyek {
		if strings.ToLower(p.Nama) == lowerKeyword {
			hasil = append(hasil, p)
		}
	}
	return hasil
}

// Mencari proyek berdasarkan kategori (Binary Search)
func BinarySearchByKategori(dataUntukDitelusuri []Proyek, keyword string) []Proyek {
	if len(dataUntukDitelusuri) == 0 {
		return []Proyek{}
	}

	sort.Slice(dataUntukDitelusuri, func(i, j int) bool {
		return strings.ToLower(dataUntukDitelusuri[i].Kategori) < strings.ToLower(dataUntukDitelusuri[j].Kategori)
	})

	var hasil []Proyek
	low, high := 0, len(dataUntukDitelusuri)-1
	targetKeyword := strings.ToLower(keyword)
	var foundIndex = -1

	for low <= high {
		mid := low + (high-low)/2
		midKategori := strings.ToLower(dataUntukDitelusuri[mid].Kategori)

		if midKategori == targetKeyword {
			foundIndex = mid
			break
		} else if midKategori < targetKeyword {
			low = mid + 1
		} else {
			high = mid - 1
		}
	}

	if foundIndex != -1 {
		hasil = append(hasil, dataUntukDitelusuri[foundIndex])
		l := foundIndex - 1
		for l >= 0 && strings.ToLower(dataUntukDitelusuri[l].Kategori) == targetKeyword {
			hasil = append(hasil, dataUntukDitelusuri[l])
			l--
		}
		r := foundIndex + 1
		for r < len(dataUntukDitelusuri) && strings.ToLower(dataUntukDitelusuri[r].Kategori) == targetKeyword {
			hasil = append(hasil, dataUntukDitelusuri[r])
			r++
		}
	}
	return hasil
}

// Mengurutkan proyek berdasarkan kesulitan (Selection Sort)
func SelectionSort(proyek []Proyek) {
	n := len(proyek)
	for i := 0; i < n-1; i++ {
		minIdx := i
		for j := i + 1; j < n; j++ {
			if proyek[j].Kesulitan < proyek[minIdx].Kesulitan {
				minIdx = j
			}
		}
		proyek[i], proyek[minIdx] = proyek[minIdx], proyek[i]
	}
}

// Mengurutkan proyek berdasarkan tanggal (Insertion Sort)
func InsertionSort(proyek []Proyek) {
	n := len(proyek)
	for i := 1; i < n; i++ {
		current := proyek[i]
		j := i - 1
		for j >= 0 && proyek[j].Tanggal > current.Tanggal {
			proyek[j+1] = proyek[j]
			j--
		}
		proyek[j+1] = current
	}
}

// Menampilkan semua proyek
func TampilkanSemuaProyek(proyek []Proyek) {
	if len(proyek) == 0 {
		fmt.Println("Belum ada proyek yang terdaftar.")
		return
	}
	fmt.Println("\n--- Daftar Semua Proyek ---")
	for _, p := range proyek {
		fmt.Printf("Nama      : %s\n", p.Nama)
		fmt.Printf("Deskripsi : %s\n", p.Deskripsi)
		fmt.Printf("Kategori  : %s\n", p.Kategori)
		fmt.Printf("Kesulitan : %s\n", p.Kesulitan)
		fmt.Printf("Tanggal   : %s\n", p.Tanggal)
		fmt.Printf("Teknologi : %s\n", strings.Join(p.Teknologi, ", "))
		fmt.Println("------------------------------")
	}
}

// Menampilkan statistik kategori
func StatistikKategori(proyek []Proyek) map[string]int {
	statistik := make(map[string]int)
	for _, p := range proyek {
		statistik[p.Kategori]++
	}
	return statistik
}

// Menu utama
func tampilkanMenu() {
	fmt.Println("\n=== APLIKASI PORTOFOLIO DATA SCIENCE ===")
	fmt.Println("[1] Tambah Proyek")
	fmt.Println("[2] Ubah Proyek")
	fmt.Println("[3] Hapus Proyek")
	fmt.Println("[4] Cari Proyek")
	fmt.Println("[5] Urutkan Proyek")
	fmt.Println("[6] Statistik Kategori")
	fmt.Println("[7] Lihat Semua Proyek")
	fmt.Println("[0] Keluar")
	fmt.Print("Pilih menu: ")
}

func main() {
	var proyek []Proyek

	for {
		tampilkanMenu()
		var pilihan int
		fmt.Scanln(&pilihan)
		// fmt.Scanln() // Jika masalah input kembali, coba uncomment baris ini.

		switch pilihan {
		case 1:
			fmt.Println("\n--- Tambah Proyek ---")
			var nama, deskripsi, kategori, kesulitan, tanggal, teknologiStr string
			
			fmt.Print("Nama Proyek: ")
			fmt.Scanln(&nama)
			
			fmt.Print("Deskripsi: ")
			fmt.Scanln(&deskripsi)
			
			fmt.Print("Kategori: ")
			fmt.Scanln(&kategori)
			
			fmt.Print("Kesulitan: ")
			fmt.Scanln(&kesulitan)
			
			fmt.Print("Tanggal (YYYY-MM-DD): ")
			fmt.Scanln(&tanggal)
			
			fmt.Print("Teknologi (dipisahkan koma): ")
			fmt.Scanln(&teknologiStr)
			
			var teknologi []string
			if strings.TrimSpace(teknologiStr) != "" {
				rawTeknologi := strings.Split(teknologiStr, ",")
				for _, t := range rawTeknologi {
					teknologi = append(teknologi, strings.TrimSpace(t))
				}
			}
			
			proyek = TambahProyek(proyek, nama, deskripsi, kategori, kesulitan, tanggal, teknologi)
			fmt.Println("Proyek berhasil ditambahkan!")

		case 2:
			fmt.Println("\n--- Ubah Proyek ---")
			if len(proyek) == 0 {
				fmt.Println("Belum ada proyek untuk diubah.")
				continue
			}
			var namaLama, namaBaru, deskripsi, kategori, kesulitan, tanggal, teknologiStr string

			fmt.Print("Nama proyek yang ingin diubah: ")
			fmt.Scanln(&namaLama)
			
			proyekDitemukan := false
			for _, p := range proyek {
				if p.Nama == namaLama {
					proyekDitemukan = true
					break
				}
			}

			if !proyekDitemukan {
				fmt.Println("Proyek dengan nama tersebut tidak ditemukan.")
				continue
			}

			fmt.Print("Nama Baru: ")
			fmt.Scanln(&namaBaru)
			fmt.Print("Deskripsi Baru: ")
			fmt.Scanln(&deskripsi)
			fmt.Print("Kategori Baru: ")
			fmt.Scanln(&kategori)
			fmt.Print("Kesulitan Baru: ")
			fmt.Scanln(&kesulitan)
			fmt.Print("Tanggal Baru (YYYY-MM-DD): ")
			fmt.Scanln(&tanggal)
			fmt.Print("Teknologi Baru (dipisah koma): ")
			fmt.Scanln(&teknologiStr)

			var teknologi []string
			if strings.TrimSpace(teknologiStr) != "" {
				rawTeknologi := strings.Split(teknologiStr, ",")
				for _, t := range rawTeknologi {
					teknologi = append(teknologi, strings.TrimSpace(t))
				}
			}
			proyek = UbahProyek(proyek, namaLama, namaBaru, deskripsi, kategori, kesulitan, tanggal, teknologi)
			fmt.Println("Proyek berhasil diubah!")

		case 3:
			fmt.Println("\n--- Hapus Proyek ---")
			if len(proyek) == 0 {
				fmt.Println("Belum ada proyek untuk dihapus.")
				continue
			}
			var nama string
			fmt.Print("Nama proyek yang ingin dihapus: ")
			fmt.Scanln(&nama)
			
			panjangAwal := len(proyek)
			proyek = HapusProyek(proyek, nama)
			if len(proyek) < panjangAwal {
				fmt.Println("Proyek berhasil dihapus!")
			} else {
				fmt.Println("Proyek dengan nama tersebut tidak ditemukan.")
			}

		case 4:
			fmt.Println("\n--- Cari Proyek ---")
			if len(proyek) == 0 {
				fmt.Println("Belum ada proyek untuk dicari.")
				continue
			}
			fmt.Println("Cari berdasarkan: \n[1] Nama (Sequential Search)\n[2] Kategori (Binary Search)")
			
			var mode int
			fmt.Print("Pilih mode: ")
			fmt.Scanln(&mode)
            if mode != 1 && mode != 2 {
                 fmt.Println("Pilihan mode tidak valid.")
                 continue
            }

			var keyword string
			var hasil []Proyek

			if mode == 1 {
				fmt.Print("Masukkan nama: ")
				fmt.Scanln(&keyword)
				hasil = SequentialSearchByName(proyek, keyword)
			} else { 
				fmt.Print("Masukkan kategori: ")
				fmt.Scanln(&keyword)
				proyekUntukCari := make([]Proyek, len(proyek))
				copy(proyekUntukCari, proyek) 
				hasil = BinarySearchByKategori(proyekUntukCari, keyword)
			}

			if len(hasil) == 0 {
				fmt.Println("Proyek tidak ditemukan.")
			} else {
				fmt.Println("Hasil Pencarian ("+ keyword +"):")
				TampilkanSemuaProyek(hasil) 
			}

		case 5:
			fmt.Println("\n--- Urutkan Proyek ---")
			if len(proyek) == 0 {
				fmt.Println("Belum ada proyek untuk diurutkan.")
				continue
			}
			fmt.Println("Urutkan berdasarkan: \n[1] Kesulitan (Selection Sort)\n[2] Tanggal (Insertion Sort)")

			var modeSort int
			fmt.Print("Pilih mode: ")
			fmt.Scanln(&modeSort)
            if modeSort != 1 && modeSort != 2 {
                 fmt.Println("Pilihan mode tidak valid.")
                 continue
            }

			if modeSort == 1 {
				SelectionSort(proyek)
				fmt.Println("Proyek berhasil diurutkan berdasarkan Kesulitan!")
			} else { 
				InsertionSort(proyek)
				fmt.Println("Proyek berhasil diurutkan berdasarkan Tanggal!")
			}
			TampilkanSemuaProyek(proyek)

		case 6:
			fmt.Println("\n--- Statistik Kategori ---")
			if len(proyek) == 0 {
				fmt.Println("Belum ada proyek untuk menampilkan statistik.")
				continue
			}
			stat := StatistikKategori(proyek)
			if len(stat) == 0 {
                fmt.Println("Tidak ada kategori proyek yang terdefinisi.")
            } else {
                for k, v := range stat {
				    fmt.Printf("%s: %d proyek\n", k, v)
			    }
            }

		case 7:
			TampilkanSemuaProyek(proyek)

		case 0:
			fmt.Println("Terima kasih telah menggunakan aplikasi ini.")
			return

		default:
			fmt.Println("Pilihan tidak valid.")
		}
	}
}
